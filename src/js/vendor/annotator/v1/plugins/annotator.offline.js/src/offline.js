// Generated by CoffeeScript 1.9.3
(function() {
  var Offline,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Annotator.Plugin.Offline = Offline = (function(superClass) {
    var _t, jQuery;

    extend(Offline, superClass);

    _t = Annotator._t;

    jQuery = Annotator.$;

    Offline.ANNOTATION_PREFIX = "annotation.";

    Offline.uuid = function() {
      return ("" + Math.random() + new Date().getTime()).slice(2);
    };

    Offline.prototype.events = {
      "annotationCreated": "_onAnnotationCreated",
      "annotationUpdated": "_onAnnotationUpdated",
      "annotationDeleted": "_onAnnotationDeleted"
    };

    Offline.prototype.options = {
      getUniqueKey: function(annotation) {
        if (!annotation.id) {
          annotation.id = Offline.uuid();
        }
        return annotation.id;
      },
      shouldLoadAnnotation: function(annotation) {
        return true;
      }
    };

    function Offline() {
      this._onOffline = bind(this._onOffline, this);
      this._onOnline = bind(this._onOnline, this);
      var event, handler, handlers;
      Offline.__super__.constructor.apply(this, arguments);
      this.store = new Offline.Store();
      this.cache = {};
      handlers = {
        online: "online",
        offline: "offline",
        beforeAnnotationLoaded: "setAnnotationData",
        beforeAnnotationCreated: "setAnnotationData"
      };
      for (event in handlers) {
        if (!hasProp.call(handlers, event)) continue;
        handler = handlers[event];
        if (typeof this.options[handler] === "function") {
          this.on(event, jQuery.proxy(this.options, handler));
        }
      }
    }

    Offline.prototype.pluginInit = function() {

      if (!Annotator.supported()) {
        return;
      }
      this.loadAnnotationsFromStore();
      if (this.isOnline()) {
        this.online();
      } else {
        this.offline();
      }
      return jQuery(window).bind({
        online: this._onOnline,
        offline: this._onOffline
      });
    };

    Offline.prototype.annotations = function() {
      return this.cache;
    };

    Offline.prototype.online = function() {
      this.publish("online", [this]);
      return this;
    };

    Offline.prototype.offline = function() {
      this.publish("offline", [this]);
      return this;
    };

    Offline.prototype.isOnline = function() {
      return window.navigator.onLine;
    };

    Offline.prototype.loadAnnotationsFromStore = function() {
      var annotation, annotations, current, i, len;
      current = [];
      annotations = this.store.all(Offline.ANNOTATION_PREFIX);
      for (i = 0, len = annotations.length; i < len; i++) {
        annotation = annotations[i];
        if (!(this.options.shouldLoadAnnotation(annotation))) {
          continue;
        }
        this.publish("beforeAnnotationLoaded", [annotation, this]);
        this.publish("annotationLoaded", [annotation, this]);
        this.cache[this.keyForAnnotation(annotation)] = annotation;
        current.push(annotation);
      }
      if (current.length) {
        this.annotator.loadAnnotations(current);
      }
      return this;
    };

    Offline.prototype.addAnnotation = function(annotation, options) {
      var isLoaded;
      if (options == null) {
        options = {};
      }
      isLoaded = this.cache[this.options.getUniqueKey(annotation)];
      if (!isLoaded && this.options.shouldLoadAnnotation(annotation)) {
        this.annotator.setupAnnotation(annotation, options.silent);
      } else {
        this.updateStoredAnnotation(annotation);
      }
      return this;
    };

    Offline.prototype.removeAnnotation = function(annotation) {
      if (this.options.shouldLoadAnnotation(annotation)) {
        this.annotator.deleteAnnotation(annotation);
      } else {
        this.removeStoredAnnotation(annotation);
      }
      return this;
    };

    Offline.prototype.updateStoredAnnotation = function(annotation) {
      var id, key, local, storable;
      id = this.keyForAnnotation(annotation);
      key = this.keyForStore(annotation);
      local = this.cache[id];
      if (local) {
        jQuery.extend(local, annotation);
      } else {
        local = this.cache[id] = annotation;
      }
      storable = jQuery.extend({}, local);
      delete storable.highlights;
      this.store.set(key, storable);
      return this;
    };

    Offline.prototype.removeStoredAnnotation = function(annotation) {
      var id, key;
      id = this.keyForAnnotation(annotation);
      key = this.keyForStore(annotation);
      this.store.remove(key);
      delete this.cache[id];
      return this;
    };

    Offline.prototype.keyForAnnotation = function(annotation) {
      return this.options.getUniqueKey.call(this, annotation, this);
    };

    Offline.prototype.keyForStore = function(annotation) {
      return Offline.ANNOTATION_PREFIX + this.keyForAnnotation(annotation);
    };

    Offline.prototype._onOnline = function(event) {
      return this.online();
    };

    Offline.prototype._onOffline = function(event) {
      return this.offline();
    };

    Offline.prototype._onAnnotationCreated = function(annotation) {
      return this.updateStoredAnnotation(annotation);
    };

    Offline.prototype._onAnnotationUpdated = function(annotation) {
      return this.updateStoredAnnotation(annotation);
    };

    Offline.prototype._onAnnotationDeleted = function(annotation) {
      return this.removeStoredAnnotation(annotation);
    };

    return Offline;

  })(Annotator.Plugin);

}).call(this);

//# sourceMappingURL=offline.js.map
