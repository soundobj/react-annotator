// Generated by CoffeeScript 1.9.3
import React from 'react';
// annotator.widget -> plugins -> v1 -> annotator -> vendor
import AnnotationList from './AnnotationList.react';
import AnnotationActions from './AnnotationActions';


(function() {
    var Widget,
        bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
        extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        hasProp = {}.hasOwnProperty;

    Annotator.Plugin.Widget = Widget = (function(superClass) {
        var _t, jQuery;

        extend(Widget, superClass);

        _t = Annotator._t;

        jQuery = Annotator.$;

        Widget.ANNOTATION_PREFIX = "annotation.";

        Widget.uuid = function() {
            return ("" + Math.random() + new Date().getTime()).slice(2);
        };

        // another way of listening to events is
        //this.subscribe('annotationsLoaded', function() {});
        Widget.prototype.events = {
            "annotationsLoaded": "_annotationsLoaded",
            "annotationDeleted": "_onAnnotationDeleted",
         //   "beforeAnnotationCreated": "_beforeAnnotationCreated",
            "annotationCreated" : "_annotationCreated",
        };

        function Widget() {
            Widget.__super__.constructor.apply(this, arguments);
        }

        Widget.annotator = undefined;
        Widget.mousedOveredAnnotation = undefined;

        Widget.prototype.pluginInit = function() {
            var superOnHighlightMouseover = this.annotator.onHighlightMouseover;
            this.annotator.onHighlightMouseover = function(event) {
                superOnHighlightMouseover(event);
                Widget.mousedOveredAnnotation = document.getElementById(event.target.getAttribute('data-annotation-id'));
                Widget.mousedOveredAnnotation.focus();
            }


            var superStartViewerHideTimer = this.annotator.startViewerHideTimer;
            this.annotator.startViewerHideTimer = function() {
                superStartViewerHideTimer();
                // use the event fired when a user mouses out of a document range selection to blur its
                // RHS annotation counterpart
                Widget.mousedOveredAnnotation.blur();
            }

            if (!Annotator.supported()) {
                return;
            }
        };

        Widget.prototype._annotationsLoaded = function(annotations) {
            console.log('annotations loaded widget',annotations);
            React.render(
                React.createElement(AnnotationList, {annotations: annotations}),
                document.getElementById('annotations')
            );
        };

        Widget.prototype._onAnnotationDeleted = function(annotation) {
            AnnotationActions.deleteAnnotation(annotation);
        };

        Widget.prototype._annotationCreated = function(annotation) {
            // bestow the new annotation with a unique id
            annotation.id = this.annotator.plugins['Offline'].options.getUniqueKey(annotation);
            // set the unique id to the DOM annotation selection too
            annotation.highlights[0].setAttribute('data-annotation-id',annotation.id);
            AnnotationActions.addAnnotation(annotation);
        };


        return Widget;

    })(Annotator.Plugin);

}).call(this);